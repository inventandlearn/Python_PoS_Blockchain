import uuid
import time
import copy


# Transaction class with attributes that uniquely details a transaction on the block. The transaction object is
# a function of a block. One of the core aspects of Blockchain.
class Transaction():

    def __init__(self, senderPublicKey, receiverPublicKey, amount, type):
        self.senderPublicKey = senderPublicKey
        self.receiverPublicKey = receiverPublicKey
        self.amount = amount
        self.type = type
        self.id = uuid.uuid1().hex
        self.timestamp = time.time()
        self.signature = ''

# Method that returns attributes of Transaction object in a dictionary
    def toJSON(self):
        return self.__dict__

# Method that maps signature generated by Wallet to empty string signature attribute of Transaction class

    def sign(self, signature):
        self.signature = signature

# Method that keeps signature consistent with each transaction initiated.
# In other words the signature of the last transaction doesn't carry over to the following transaction.
    def payload(self):
        jsonRepresentation = copy.deepcopy(self.toJSON())
        jsonRepresentation['signature'] = ''
        return jsonRepresentation

# Method that is used to confirm the existence of a transaction so that it can be added to a transaction pool.
    def equals(self, transaction):
        if self.id == transaction.id:
            return True
        else:
            return False
